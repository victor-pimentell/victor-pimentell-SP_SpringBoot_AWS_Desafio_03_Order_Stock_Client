openapi: 3.0.1
info:
  title: REST API - Order Microservice
  description: Microservice intended for orders management
  version: v1
servers:
  - url: http://localhost:8081
    description: Generated server url
tags:
  - name: Order
    description: Contains all operations related to the order resource
paths:
  /api/v1/orders:
    put:
      tags:
        - Order
      summary: Update Order's products
      description: 'Resource to update an existing order''s products. It also updates product''s quantities on stock microservice. '
      operationId: updateOrderProducts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderUpdateProductsDto'
        required: true
      responses:
        '200':
          description: Order's products updated successfully
          content:
            application/json;charset=UTF-8: {}
        '400':
          description: Request not processed due to missing or invalid data
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '404':
          description: Order not found
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
    post:
      tags:
        - Order
      summary: Create a new order
      description: 'Resource to create a new order. It also updates product''s quantities on stock microservice. '
      operationId: createOrder
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderCreateDto'
        required: true
      responses:
        '201':
          description: Order created successfully
          headers:
            Location:
              description: URL of the created resource
              style: simple
              schema:
                type: string
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/OrderResponseDto'
        '400':
          description: Request not processed due to missing or invalid data
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
  /api/v1/orders/email:
    put:
      tags:
        - Order
      summary: Update Order's email
      description: Resource to update an existing order's email. This attribute must be in sync with its client's email, so only update it through client microservie.
      operationId: updateOrderEmail
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateEmailDto'
        required: true
      responses:
        '200':
          description: Order's email updated successfully
          content:
            application/json;charset=UTF-8: {}
        '400':
          description: Request not processed due to missing or invalid data
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '404':
          description: Order not found
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
  /api/v1/orders/id/{id}:
    get:
      tags:
        - Order
      summary: Get order by ID
      description: Retrieve order details by ID.
      operationId: getOrderById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Order found and returned successfully
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/OrderResponseDto'
        '404':
          description: Order not found
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
  /api/v1/orders/email/{email}:
    get:
      tags:
        - Order
      summary: Get client's orders by Email
      description: Retrieve client's orders by Email.
      operationId: getOrdersByEmail
      parameters:
        - name: email
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Client's orders found and returned successfully
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/OrderResponseDto'
        '404':
          description: Orders not found
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
components:
  schemas:
    ErrorMessage:
      type: object
      properties:
        path:
          type: string
        method:
          type: string
        status:
          type: integer
          format: int32
        statusText:
          type: string
        message:
          type: string
        errors:
          type: object
          additionalProperties:
            type: string
    OrderUpdateProductsDto:
      required:
        - id
      type: object
      properties:
        id:
          type: integer
          format: int64
        products:
          maxItems: 2147483647
          minItems: 1
          type: array
          items:
            $ref: '#/components/schemas/Product'
    Product:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        quantity:
          type: integer
          format: int32
        hash:
          type: string
    UpdateEmailDto:
      required:
        - newEmail
        - oldEmail
      type: object
      properties:
        oldEmail:
          type: string
        newEmail:
          type: string
    Links:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/Link'
    OrderResponseDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        email:
          type: string
        products:
          type: array
          items:
            $ref: '#/components/schemas/Product'
        _links:
          $ref: '#/components/schemas/Links'
    OrderCreateDto:
      required:
        - email
      type: object
      properties:
        email:
          type: string
        products:
          maxItems: 2147483647
          minItems: 1
          type: array
          items:
            $ref: '#/components/schemas/Product'
    Link:
      type: object
      properties:
        href:
          type: string
        hreflang:
          type: string
        title:
          type: string
        type:
          type: string
        deprecation:
          type: string
        profile:
          type: string
        name:
          type: string
        templated:
          type: boolean
